       Routines for the STL Seasonal-Trend Decomposition Procedure



       This directory contains routines for carrying out the STL
       decomposition procedure on seasonal time series.  Most users
       will need only to call one or both of the top-level routines
       stl and stlez.  They are documented in files stl.doc and
       stlez.doc.  Routine stl allows specification of all
       parameters; routine stlez (pronounced "S-T-L easy") selects
       default values for most parameters and carries out
       robustness iterations to convergence.  The STL statistical
       method can be applied in principle even when there are
       missing values in the time series, but these routines do not
       allow missing values.

       On a UNIX system, just type "make" to compile *.f and run
       the sample program.  On a PC, change the names of the
       Fortran files by adding "or" to each, compile *.for, and
       load; files renam,bat, compile.bat, load.bat, and objects
       may be helpful.

       Estimation of Other Components

       In some applications components other than the seasonal and
       trend need to be estimated.  Trading-day estimation for
       economic time series is one example.  The routines supplied
       here have been constructed so that Fortran or Ratfor code
       that carries out estimation of such components can be
       inserted easily.

       An illustration is given by the following modification of
       the Ratfor routine in stl.r.  In this modification a routine
       called "yours" estimates a component called "other".  Notice
       that the robustness weights enter yours; that is, if stl is
       carrying out robust estimation of the seasonal and trend
       components then it is appropriate to robustly estimate other
       components.  Usually the routine yours would need workspace,
       though none is given here.

       subroutine stl(y, n, np, ns, nt, nl, isdeg, itdeg, ildeg,
               nsjump, ntjump, nljump, ni, no, rw,
               season, trend, other, more, work)
       integer n, np, ns, nt, nl, nsjump, ntjump, nljump, ni, no, k
       integer newns, newnt, newnl, newnp
       real y(n), rw(n), season(n), trend(n), other(n), more(n),
               work(n+2*np,5)
       logical userw
       userw = .false.
       k = 0
       do i = 1, n {
               trend(i) = 0.0
               other(i) = 0.0
               }
       newns = max0(3,ns)
       newnt = max0(3,nt)
       newnl = max0(3,nl)
       newnp = max0(2,np)
       if(mod(newns,2)==0) newns = newns + 1   #make odd
       if(mod(newnt,2)==0) newnt = newnt + 1
       if(mod(newnl,2)==0) newnl = newnl + 1
       repeat {
               do i = 1, n
                       more(i) = y(i) - other(i)
               call onestp(more, n, newnp, newns, newnt, newnl, isdeg,
                               itdeg, ildeg, nsjump, ntjump, nljump, ni,
                               userw, rw, season, trend, work)
               do i = 1, n
                       more(i) = y(i) - season(i) - trend(i)
               call yours(more, n, userw, rw, other)
               k = k+1
               if(k>no) break
               do i = 1, n
                       work(i,1) = trend(i)+season(i)+other(i)
               call rwts(y, n, work(1, 1), rw)
               userw = .true.
               }
       if (no<=0)
               do i = 1, n
                       rw(i) = 1.0
       return
       end




















